// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.1
//! DATE: 2021-02-09, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn update_schedule() -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(c: u32, s: u32, ) -> Weight;
	fn call(c: u32, ) -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_code_kb_delta(c: u32, d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(4_066_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(46_123_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_302_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(292_374_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((159_491_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(28_971_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 132_000
			.saturating_add((156_503_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 66_000
			.saturating_add((2_738_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(177_719_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((8_726_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 2_000
			.saturating_add((2_276_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(181_353_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_965_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(339_071_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((4_892_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(131_167_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((282_631_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(139_974_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((281_117_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(154_011_000 as Weight)
			// Standard Error: 227_000
			.saturating_add((277_608_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(145_363_000 as Weight)
			// Standard Error: 223_000
			.saturating_add((572_354_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(125_901_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((278_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(132_041_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((277_333_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(166_181_000 as Weight)
			// Standard Error: 295_000
			.saturating_add((275_810_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(130_373_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((605_781_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(138_250_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((276_863_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(136_367_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((276_902_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(147_534_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((521_663_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(116_102_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((135_134_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(123_551_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((7_727_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(135_065_000 as Weight)
			// Standard Error: 0
			.saturating_add((274_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(118_043_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((5_112_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(127_718_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((781_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(124_831_000 as Weight)
			// Standard Error: 63_000
			.saturating_add((106_565_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(222_106_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((8_671_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(219_347_000 as Weight)
			// Standard Error: 333_000
			.saturating_add((131_846_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 53_000
			.saturating_add((8_846_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_651_000
			.saturating_add((3_784_178_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(143_670_000 as Weight)
			// Standard Error: 245_000
			.saturating_add((661_302_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(157_196_000 as Weight)
			// Standard Error: 341_000
			.saturating_add((960_496_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_253_463_000 as Weight)
			// Standard Error: 2_553_000
			.saturating_add((610_453_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 503_000
			.saturating_add((249_427_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(145_654_000 as Weight)
			// Standard Error: 272_000
			.saturating_add((709_125_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(3_160_956_000 as Weight)
			// Standard Error: 18_524_000
			.saturating_add((16_857_851_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_735_084_000 as Weight)
			// Standard Error: 378_000
			.saturating_add((75_455_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_556_000
			.saturating_add((2_290_162_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(95_531_000 as Weight)
			// Standard Error: 1_038_000
			.saturating_add((977_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(732_088_000 as Weight)
			// Standard Error: 282_000
			.saturating_add((153_680_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(93_329_000 as Weight)
			// Standard Error: 1_545_000
			.saturating_add((5_451_392_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 10_795_000
			.saturating_add((10_208_618_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(3_758_379_000 as Weight)
			// Standard Error: 196_000
			.saturating_add((398_621_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 304_167_000
			.saturating_add((4_916_069_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 98_000
			.saturating_add((60_884_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 105_000
			.saturating_add((86_154_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 35_215_000
			.saturating_add((20_922_910_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(2_915_993_000 as Weight)
			// Standard Error: 340_000
			.saturating_add((879_226_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 182_000
			.saturating_add((63_141_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 182_000
			.saturating_add((91_682_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 182_000
			.saturating_add((289_074_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(207 as Weight))
			.saturating_add(T::DbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(129_663_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((255_600_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(1_032_945_000 as Weight)
			// Standard Error: 192_000
			.saturating_add((428_401_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(124_722_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((268_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(748_778_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((343_243_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(125_445_000 as Weight)
			// Standard Error: 187_000
			.saturating_add((243_659_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(637_336_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((159_817_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(126_571_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((244_116_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(651_141_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((159_750_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(24_184_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((3_158_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(26_554_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((159_994_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(26_556_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((230_906_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(24_202_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((12_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(24_118_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((12_409_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_099_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((6_365_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(24_120_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((14_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(24_167_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((16_105_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(38_992_000 as Weight)
			// Standard Error: 0
			.saturating_add((96_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(24_556_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((97_094_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(32_134_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((194_462_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(240_178_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((3_471_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(41_972_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((3_224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(41_897_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((3_667_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(41_950_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((4_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(27_763_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_829_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(27_734_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((11_793_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(26_681_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((3_415_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(24_921_000 as Weight)
			// Standard Error: 5_068_000
			.saturating_add((2_335_092_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(24_182_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_388_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(24_194_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(24_130_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((6_040_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(24_199_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((5_485_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(24_204_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((5_327_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(24_172_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_248_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(24_187_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_282_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(24_165_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((7_420_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(24_226_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((7_281_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(24_174_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_283_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(24_221_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((7_264_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(24_126_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_227_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(24_192_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((7_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(24_173_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_162_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(24_203_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_136_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(24_298_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_138_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(24_291_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(24_244_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_114_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(24_224_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_110_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(24_240_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_238_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(24_190_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((13_137_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_200_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((12_249_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(24_157_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_044_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_142_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((12_639_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(24_176_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(24_176_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_102_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(24_222_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_051_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(24_208_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_304_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(24_157_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_306_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(24_208_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_321_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(24_124_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_398_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(24_163_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_269_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(4_066_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(46_123_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_302_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(292_374_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((159_491_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(28_971_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 132_000
			.saturating_add((156_503_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 66_000
			.saturating_add((2_738_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(177_719_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((8_726_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 2_000
			.saturating_add((2_276_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(181_353_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_965_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(339_071_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((4_892_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(131_167_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((282_631_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(139_974_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((281_117_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(154_011_000 as Weight)
			// Standard Error: 227_000
			.saturating_add((277_608_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(145_363_000 as Weight)
			// Standard Error: 223_000
			.saturating_add((572_354_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(125_901_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((278_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(132_041_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((277_333_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(166_181_000 as Weight)
			// Standard Error: 295_000
			.saturating_add((275_810_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(130_373_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((605_781_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(138_250_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((276_863_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(136_367_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((276_902_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(147_534_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((521_663_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(116_102_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((135_134_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(123_551_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((7_727_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(135_065_000 as Weight)
			// Standard Error: 0
			.saturating_add((274_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(118_043_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((5_112_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(127_718_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((781_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(124_831_000 as Weight)
			// Standard Error: 63_000
			.saturating_add((106_565_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(222_106_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((8_671_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(219_347_000 as Weight)
			// Standard Error: 333_000
			.saturating_add((131_846_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 53_000
			.saturating_add((8_846_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 1_651_000
			.saturating_add((3_784_178_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(143_670_000 as Weight)
			// Standard Error: 245_000
			.saturating_add((661_302_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(157_196_000 as Weight)
			// Standard Error: 341_000
			.saturating_add((960_496_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_253_463_000 as Weight)
			// Standard Error: 2_553_000
			.saturating_add((610_453_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 503_000
			.saturating_add((249_427_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(145_654_000 as Weight)
			// Standard Error: 272_000
			.saturating_add((709_125_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(3_160_956_000 as Weight)
			// Standard Error: 18_524_000
			.saturating_add((16_857_851_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_735_084_000 as Weight)
			// Standard Error: 378_000
			.saturating_add((75_455_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_556_000
			.saturating_add((2_290_162_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(95_531_000 as Weight)
			// Standard Error: 1_038_000
			.saturating_add((977_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(732_088_000 as Weight)
			// Standard Error: 282_000
			.saturating_add((153_680_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(93_329_000 as Weight)
			// Standard Error: 1_545_000
			.saturating_add((5_451_392_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 10_795_000
			.saturating_add((10_208_618_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(3_758_379_000 as Weight)
			// Standard Error: 196_000
			.saturating_add((398_621_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 304_167_000
			.saturating_add((4_916_069_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 98_000
			.saturating_add((60_884_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 105_000
			.saturating_add((86_154_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 35_215_000
			.saturating_add((20_922_910_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(2_915_993_000 as Weight)
			// Standard Error: 340_000
			.saturating_add((879_226_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 182_000
			.saturating_add((63_141_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 182_000
			.saturating_add((91_682_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 182_000
			.saturating_add((289_074_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(207 as Weight))
			.saturating_add(RocksDbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(129_663_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((255_600_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(1_032_945_000 as Weight)
			// Standard Error: 192_000
			.saturating_add((428_401_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(124_722_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((268_263_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(748_778_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((343_243_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(125_445_000 as Weight)
			// Standard Error: 187_000
			.saturating_add((243_659_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(637_336_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((159_817_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(126_571_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((244_116_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(651_141_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((159_750_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(24_184_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((3_158_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(26_554_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((159_994_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(26_556_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((230_906_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(24_202_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((12_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(24_118_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((12_409_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(24_099_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((6_365_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(24_120_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((14_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(24_167_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((16_105_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(38_992_000 as Weight)
			// Standard Error: 0
			.saturating_add((96_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(24_556_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((97_094_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(32_134_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((194_462_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(240_178_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((3_471_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(41_972_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((3_224_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(41_897_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((3_667_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(41_950_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((4_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(27_763_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_829_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(27_734_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((11_793_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(26_681_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((3_415_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(24_921_000 as Weight)
			// Standard Error: 5_068_000
			.saturating_add((2_335_092_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(24_182_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_388_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(24_194_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(24_130_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((6_040_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(24_199_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((5_485_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(24_204_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((5_327_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(24_172_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_248_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(24_187_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_282_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(24_165_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((7_420_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(24_226_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((7_281_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(24_174_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_283_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(24_221_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((7_264_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(24_126_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_227_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(24_192_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((7_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(24_173_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_162_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(24_203_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_136_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(24_298_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_138_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(24_291_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_259_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(24_244_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_114_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(24_224_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_110_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(24_240_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_238_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(24_190_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((13_137_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(24_200_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((12_249_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(24_157_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_044_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(24_142_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((12_639_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(24_176_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((7_115_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(24_176_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_102_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(24_222_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_051_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(24_208_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_304_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(24_157_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_306_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(24_208_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_321_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(24_124_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_398_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(24_163_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_269_000 as Weight).saturating_mul(r as Weight))
	}
}
